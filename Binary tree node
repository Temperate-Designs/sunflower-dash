#include<iostream>
#include<cstdio>
#include<cmath>
#include <queue>
#include <bits/stdc++.h>
using namespace std;
template <typename T>
class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T>* left;
    BinaryTreeNode<T>* right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode() {
        if (left) delete left;
        if (right) delete right;
    }
};


class BST {
    BinaryTreeNode<int>* root;
    
    public :
    BST() {
        root = NULL;
    }
    
    ~BST() {
        delete root;
    }
    
    

    
    
    
    private :
    BinaryTreeNode<int> * insert(BinaryTreeNode<int> * node , int data) {
        if(node == NULL) {
            BinaryTreeNode<int> * newNode = new BinaryTreeNode<int>(data);
            return newNode;
        }
        
        if(data <= node->data) {
            node->left = insert(node->left, data);
        }else {
            node->right = insert(node->right, data);
        }
        
        return node;
    }
    public :
    void insert(int data) {
        this->root = insert(this->root, data);
    }
    
 void helper(BinaryTreeNode<int> *root, int k, vector<int> v){
    
    if(root == NULL){
        return;
    }
    
    
    if(root -> left == NULL && root -> right == NULL){
        if(k - root -> data == 0){
            cout << root -> data << endl;
            int i = v.size()-1;
            while(i >= 0){
                cout << v[i] << endl;
                i--;
            }
            
            
        }
        return;
    }
    
    v.push_back(root -> data);
    helper(root -> left, k - root -> data, v);
    helper(root -> right, k - root -> data, v);
}

void rootToLeafPathsSumToK( int k) {
 
    vector<int> v;
    
    helper(root, k, v);
}
                   
};











int main()
{
int n;
  BST * bt = new BST();
  cin>>n;
  while(n!= -1) {
    bt->insert(n);
    cin>>n;
  }
  int sum;
  cin>>sum;
  bt->rootToLeafPathsSumToK(sum);
   return 0;
}
